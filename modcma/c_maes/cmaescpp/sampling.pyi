import numpy

class Gaussian(Sampler):
    def __init__(self, d: int) -> None: ...
    def __call__(self) -> numpy.ndarray[numpy.float64[m,1]]: ...

class Halton(Sampler):
    def __init__(self, d: int, i: int) -> None: ...
    def __call__(self) -> numpy.ndarray[numpy.float64[m,1]]: ...

class Mirrored(Sampler):
    def __init__(self, sampler: Sampler) -> None: ...
    def __call__(self) -> numpy.ndarray[numpy.float64[m,1]]: ...

class Orthogonal(Sampler):
    def __init__(self, sampler: Sampler, n_samples: int) -> None: ...
    def __call__(self) -> numpy.ndarray[numpy.float64[m,1]]: ...

class Sampler:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def d(self) -> int: ...

class Sobol(Sampler):
    def __init__(self, d: int) -> None: ...
    def __call__(self) -> numpy.ndarray[numpy.float64[m,1]]: ...

class Uniform(Sampler):
    def __init__(self, d: int) -> None: ...
    def __call__(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
